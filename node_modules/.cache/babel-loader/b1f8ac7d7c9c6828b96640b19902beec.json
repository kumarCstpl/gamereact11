{"ast":null,"code":"import{createSlice,current}from'@reduxjs/toolkit';import{boardIsFull,createGrid}from'../helpers/helpers';import{findRowToLandCounter}from'../helpers/findRowToLandCounter';import{checkForWin}from'../helpers/checkForWin';var initialState={gameIsRunning:false,gameMode:'',p1:{name:'',color:'red',score:0},p2:{name:'',color:'yellow',score:0},turn:'red',gameBoard:createGrid(),winner:null,timer:30,currentPlayer:'p1',isGamePaused:false,starterColor:'red',isTimeForNextTurn:true,winnigComb:{},CPULevel:4,pointerColumn:'0'};var gameSlice=createSlice({name:'game',initialState:initialState,reducers:{startGame:function startGame(state,action){state.gameMode=action.payload;state.p1.name=action.payload==='PvP'?'Player 1':'You';state.p2.name=action.payload==='PvP'?'Player 2':'CPU';state.currentPlayer=state.p1.color===state.turn?'p1':'p2';state.gameIsRunning=true;},placeCounter:function placeCounter(state,action){var col=action.payload.col;var row=action.payload.row;state.gameBoard[row][col]=state.turn;},changeTurn:function changeTurn(state){state.turn=state.turn==='red'?'yellow':'red';state.timer=30;state.currentPlayer=state.p1.color===state.turn?'p1':'p2';},checkForWinner:function checkForWinner(state,action){var _current=current(state),gameBoard=_current.gameBoard;var col=action.payload.col;var row=action.payload.row;var winnerComb=checkForWin(row,col,gameBoard,state.turn);if(typeof winnerComb!=='boolean'&&winnerComb.winner){var winner=winnerComb.winner,segments=winnerComb.segments;state.winner=state.p1.color===winner?'p1':'p2';state[state.winner].score++;segments.forEach(function(seg){return state.winnigComb[\"\".concat(seg[0]).concat(seg[1])]=true;});state.isGamePaused=true;}},updateTimer:function updateTimer(state,action){state.timer=action.payload;},playAgain:function playAgain(state){state.gameBoard=createGrid();state.timer=30;state.isGamePaused=false;state.winnigComb={};// change turn color to color that was second in previous round\nstate.turn=state.starterColor==='red'?'yellow':'red';state.starterColor=state.starterColor==='red'?'yellow':'red';state.currentPlayer=state.p1.color===state.turn?'p1':'p2';state.winner=null;},restartGame:function restartGame(state){state.gameBoard=createGrid();state.timer=30;state.isGamePaused=false;state.winnigComb={};// return initial turn color\nstate.turn=state.starterColor;state.currentPlayer=state.p1.color===state.turn?'p1':'p2';state.winner=null;},quitGame:function quitGame(){return initialState;},pauseGame:function pauseGame(state){state.isGamePaused=true;},continueGame:function continueGame(state){state.isGamePaused=false;},setIsTimeToNextTurn:function setIsTimeToNextTurn(state,action){state.isTimeForNextTurn=action.payload;},setCPULevel:function setCPULevel(state,action){state.CPULevel=action.payload;},setWinner:function setWinner(state,action){state.winner=action.payload;},checkForTie:function checkForTie(state){if(boardIsFull(state.gameBoard)){state.winner='tie';}},setPointercolumn:function setPointercolumn(state,action){state.pointerColumn=action.payload;}}});// exporting all actions that we need\nvar _gameSlice$actions=gameSlice.actions,startGame=_gameSlice$actions.startGame,placeCounter=_gameSlice$actions.placeCounter,changeTurn=_gameSlice$actions.changeTurn,checkForWinner=_gameSlice$actions.checkForWinner,updateTimer=_gameSlice$actions.updateTimer,playAgain=_gameSlice$actions.playAgain,pauseGame=_gameSlice$actions.pauseGame,continueGame=_gameSlice$actions.continueGame,restartGame=_gameSlice$actions.restartGame,quitGame=_gameSlice$actions.quitGame,setIsTimeToNextTurn=_gameSlice$actions.setIsTimeToNextTurn,setCPULevel=_gameSlice$actions.setCPULevel,setWinner=_gameSlice$actions.setWinner,checkForTie=_gameSlice$actions.checkForTie,setPointercolumn=_gameSlice$actions.setPointercolumn;// exporting all states that we need\nexport{startGame,placeCounter,changeTurn,checkForWinner,updateTimer,playAgain,pauseGame,continueGame,restartGame,quitGame,setIsTimeToNextTurn,setCPULevel,setWinner,checkForTie,setPointercolumn};export var selectGameIsRunning=function selectGameIsRunning(state){return state.game.gameIsRunning;};export var selectPlayer1=function selectPlayer1(state){return state.game.p1;};export var selectPlayer2=function selectPlayer2(state){return state.game.p2;};export var selectTurn=function selectTurn(state){return state.game.turn;};export var selectGameBoard=function selectGameBoard(state){return state.game.gameBoard;};export var selectWinner=function selectWinner(state){return state.game.winner;};export var selectGameMode=function selectGameMode(state){return state.game.gameMode;};export var selectTimer=function selectTimer(state){return state.game.timer;};export var selectPointerColumn=function selectPointerColumn(state){return state.game.pointerColumn;};export var selectIsTimeForNextTurn=function selectIsTimeForNextTurn(state){return state.game.isTimeForNextTurn;};export var selectWinnigCombination=function selectWinnigCombination(state){return state.game.winnigComb;};export var selectIsGamePaused=function selectIsGamePaused(state){return state.game.isGamePaused;};export var selectCurrentPlayer=function selectCurrentPlayer(state){return state.game.currentPlayer;};// exporting reducer\nexport var gameReducer=gameSlice.reducer;export var makeMove=function makeMove(col){return function(dispatch,getState){// getting current game settings\nvar _getState=getState(),game=_getState.game;var gameBoard=game.gameBoard;// if column is full or there is a winner or animation is in process when return false\nif(gameBoard[0][col]||game.winner||!game.isTimeForNextTurn)return false;// set time to next turn to false to prevent amking move before end of animation\ndispatch(setIsTimeToNextTurn(false));// getting row in column with empty cell\nvar row=findRowToLandCounter(gameBoard,col);// place counter\ndispatch(placeCounter({col:col,row:row}));// checkforwin\ndispatch(checkForWinner({col:col,row:row}));// checking for tie\ndispatch(checkForTie());// change turn\ndispatch(changeTurn());// after 0.4s we set time to next turn to true\n// we need this time to make sure that counter animation is finished\nsetTimeout(function(){dispatch(setIsTimeToNextTurn(true));},400);return true;};};","map":{"version":3,"names":["createSlice","current","boardIsFull","createGrid","findRowToLandCounter","checkForWin","initialState","gameIsRunning","gameMode","p1","name","color","score","p2","turn","gameBoard","winner","timer","currentPlayer","isGamePaused","starterColor","isTimeForNextTurn","winnigComb","CPULevel","pointerColumn","gameSlice","reducers","startGame","state","action","payload","placeCounter","col","row","changeTurn","checkForWinner","winnerComb","segments","forEach","seg","updateTimer","playAgain","restartGame","quitGame","pauseGame","continueGame","setIsTimeToNextTurn","setCPULevel","setWinner","checkForTie","setPointercolumn","actions","selectGameIsRunning","game","selectPlayer1","selectPlayer2","selectTurn","selectGameBoard","selectWinner","selectGameMode","selectTimer","selectPointerColumn","selectIsTimeForNextTurn","selectWinnigCombination","selectIsGamePaused","selectCurrentPlayer","gameReducer","reducer","makeMove","dispatch","getState","setTimeout"],"sources":["C:/wamp64/www/gamereact11/src/store/gameSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\nimport { RootState } from './store';\nimport { boardIsFull, createGrid } from '../helpers/helpers';\nimport { findRowToLandCounter } from '../helpers/findRowToLandCounter';\nimport { counter } from '../helpers/helpers';\nimport { store } from './store';\nimport { checkForWin } from '../helpers/checkForWin';\n\ntype player = {\n  name: string;\n  color: string;\n  score: number;\n};\n\ntype inintialStateType = {\n  [key: string]: any;\n  gameIsRunning: boolean;\n  gameMode: string;\n  p1: player;\n  p2: player;\n  turn: string;\n  gameBoard: counter[][];\n  winner: string | null;\n  timer: number;\n  currentPlayer: string;\n  isGamePaused: boolean;\n  starterColor: string;\n  isTimeForNextTurn: boolean;\n  CPULevel: number;\n  winnigComb: {\n    [key: string]: boolean;\n  };\n  pointerColumn: string;\n};\n\nconst initialState: inintialStateType = {\n  gameIsRunning: false,\n  gameMode: '',\n  p1: {\n    name: '',\n    color: 'red',\n    score: 0,\n  },\n  p2: {\n    name: '',\n    color: 'yellow',\n    score: 0,\n  },\n  turn: 'red',\n  gameBoard: createGrid(),\n  winner: null,\n  timer: 30,\n  currentPlayer: 'p1',\n  isGamePaused: false,\n  starterColor: 'red',\n  isTimeForNextTurn: true,\n  winnigComb: {},\n  CPULevel: 4,\n  pointerColumn: '0',\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    startGame(state, action: PayloadAction<string>) {\n      state.gameMode = action.payload;\n      state.p1.name = action.payload === 'PvP' ? 'Player 1' : 'You';\n      state.p2.name = action.payload === 'PvP' ? 'Player 2' : 'CPU';\n      state.currentPlayer = state.p1.color === state.turn ? 'p1' : 'p2';\n      state.gameIsRunning = true;\n    },\n    placeCounter(state, action: PayloadAction<{ col: number; row: number }>) {\n      const col = action.payload.col;\n      const row = action.payload.row;\n\n      state.gameBoard[row][col] = state.turn;\n    },\n    changeTurn(state) {\n      state.turn = state.turn === 'red' ? 'yellow' : 'red';\n      state.timer = 30;\n      state.currentPlayer = state.p1.color === state.turn ? 'p1' : 'p2';\n    },\n\n    checkForWinner(state, action: PayloadAction<{ col: number; row: number }>) {\n      const { gameBoard } = current(state);\n      const col = action.payload.col;\n      const row = action.payload.row;\n\n      const winnerComb = checkForWin(row, col, gameBoard, state.turn);\n      if (typeof winnerComb !== 'boolean' && winnerComb.winner) {\n        const { winner, segments } = winnerComb;\n        state.winner = state.p1.color === winner ? 'p1' : 'p2';\n        state[state.winner].score++;\n        segments.forEach(\n          (seg) => (state.winnigComb[`${seg[0]}${seg[1]}`] = true)\n        );\n        state.isGamePaused = true;\n      }\n    },\n    updateTimer(state, action: PayloadAction<number>) {\n      state.timer = action.payload;\n    },\n\n    playAgain(state) {\n      state.gameBoard = createGrid();\n      state.timer = 30;\n      state.isGamePaused = false;\n      state.winnigComb = {};\n      // change turn color to color that was second in previous round\n      state.turn = state.starterColor === 'red' ? 'yellow' : 'red';\n      state.starterColor = state.starterColor === 'red' ? 'yellow' : 'red';\n      state.currentPlayer = state.p1.color === state.turn ? 'p1' : 'p2';\n      state.winner = null;\n    },\n\n    restartGame(state) {\n      state.gameBoard = createGrid();\n      state.timer = 30;\n      state.isGamePaused = false;\n      state.winnigComb = {};\n      // return initial turn color\n      state.turn = state.starterColor;\n\n      state.currentPlayer = state.p1.color === state.turn ? 'p1' : 'p2';\n      state.winner = null;\n    },\n\n    quitGame: () => initialState,\n\n    pauseGame(state) {\n      state.isGamePaused = true;\n    },\n    continueGame(state) {\n      state.isGamePaused = false;\n    },\n    setIsTimeToNextTurn(state, action: PayloadAction<boolean>) {\n      state.isTimeForNextTurn = action.payload;\n    },\n    setCPULevel(state, action: PayloadAction<number>) {\n      state.CPULevel = action.payload;\n    },\n    setWinner(state, action: PayloadAction<string>) {\n      state.winner = action.payload;\n    },\n    checkForTie(state) {\n      if (boardIsFull(state.gameBoard)) {\n        state.winner = 'tie';\n      }\n    },\n    setPointercolumn(state, action: PayloadAction<string>) {\n      state.pointerColumn = action.payload;\n    },\n  },\n});\n\n// exporting all actions that we need\nexport const {\n  startGame,\n  placeCounter,\n  changeTurn,\n  checkForWinner,\n  updateTimer,\n  playAgain,\n  pauseGame,\n  continueGame,\n  restartGame,\n  quitGame,\n  setIsTimeToNextTurn,\n  setCPULevel,\n  setWinner,\n  checkForTie,\n  setPointercolumn,\n} = gameSlice.actions;\n\n// exporting all states that we need\nexport const selectGameIsRunning = (state: RootState) =>\n  state.game.gameIsRunning;\nexport const selectPlayer1 = (state: RootState) => state.game.p1;\nexport const selectPlayer2 = (state: RootState) => state.game.p2;\nexport const selectTurn = (state: RootState) => state.game.turn;\nexport const selectGameBoard = (state: RootState) => state.game.gameBoard;\nexport const selectWinner = (state: RootState) => state.game.winner;\nexport const selectGameMode = (state: RootState) => state.game.gameMode;\nexport const selectTimer = (state: RootState) => state.game.timer;\nexport const selectPointerColumn = (state: RootState) =>\n  state.game.pointerColumn;\nexport const selectIsTimeForNextTurn = (state: RootState) =>\n  state.game.isTimeForNextTurn;\nexport const selectWinnigCombination = (state: RootState) =>\n  state.game.winnigComb;\nexport const selectIsGamePaused = (state: RootState) => state.game.isGamePaused;\nexport const selectCurrentPlayer = (state: RootState) =>\n  state.game.currentPlayer;\n\n// exporting reducer\nexport const gameReducer = gameSlice.reducer;\n\nexport const makeMove = (col: number) => {\n  return (\n    dispatch: typeof store.dispatch,\n    getState: typeof store.getState\n  ): boolean => {\n    // getting current game settings\n    const { game } = getState();\n    const gameBoard = game.gameBoard;\n    // if column is full or there is a winner or animation is in process when return false\n    if (gameBoard[0][col] || game.winner || !game.isTimeForNextTurn)\n      return false;\n    // set time to next turn to false to prevent amking move before end of animation\n    dispatch(setIsTimeToNextTurn(false));\n    // getting row in column with empty cell\n    const row = findRowToLandCounter(gameBoard, col);\n    // place counter\n    dispatch(placeCounter({ col, row }));\n    // checkforwin\n    dispatch(checkForWinner({ col, row }));\n    // checking for tie\n    dispatch(checkForTie());\n    // change turn\n    dispatch(changeTurn());\n    // after 0.4s we set time to next turn to true\n    // we need this time to make sure that counter animation is finished\n    setTimeout(() => {\n      dispatch(setIsTimeToNextTurn(true));\n    }, 400);\n    return true;\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}