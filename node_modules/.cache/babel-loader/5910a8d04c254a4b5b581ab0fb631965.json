{"ast":null,"code":"/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = val => typeof val === \"object\" && val !== null || typeof val === \"function\";\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\nconst proxyTransferHandler = {\n  canHandle: val => isObject(val) && val[proxyMarker],\n  serialize(obj) {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  }\n};\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\nconst throwTransferHandler = {\n  canHandle: value => isObject(value) && throwMarker in value,\n  serialize(_ref) {\n    let {\n      value\n    } = _ref;\n    let serialized;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack\n        }\n      };\n    } else {\n      serialized = {\n        isError: false,\n        value\n      };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(new Error(serialized.value.message), serialized.value);\n    }\n    throw serialized.value;\n  }\n};\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\nconst transferHandlers = new Map([[\"proxy\", proxyTransferHandler], [\"throw\", throwTransferHandler]]);\nfunction expose(obj) {\n  let ep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self;\n  ep.addEventListener(\"message\", function callback(ev) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const {\n      id,\n      type,\n      path\n    } = Object.assign({\n      path: []\n    }, ev.data);\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case \"GET\" /* GET */:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case \"SET\" /* SET */:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case \"APPLY\" /* APPLY */:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case \"CONSTRUCT\" /* CONSTRUCT */:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case \"ENDPOINT\" /* ENDPOINT */:\n          {\n            const {\n              port1,\n              port2\n            } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case \"RELEASE\" /* RELEASE */:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = {\n        value,\n        [throwMarker]: 0\n      };\n    }\n    Promise.resolve(returnValue).catch(value => {\n      return {\n        value,\n        [throwMarker]: 0\n      };\n    }).then(returnValue => {\n      const [wireValue, transferables] = toWireValue(returnValue);\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n      if (type === \"RELEASE\" /* RELEASE */) {\n        // detach and deactive after sending release response above.\n        ep.removeEventListener(\"message\", callback);\n        closeEndPoint(ep);\n      }\n    });\n  });\n  if (ep.start) {\n    ep.start();\n  }\n}\nfunction isMessagePort(endpoint) {\n  return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\nfunction wrap(ep, target) {\n  return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\nfunction createProxy(ep) {\n  let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: \"RELEASE\" /* RELEASE */,\n            path: path.map(p => p.toString())\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return {\n            then: () => proxy\n          };\n        }\n        const r = requestResponseMessage(ep, {\n          type: \"GET\" /* GET */,\n          path: path.map(p => p.toString())\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(ep, {\n        type: \"SET\" /* SET */,\n        path: [...path, prop].map(p => p.toString()),\n        value\n      }, transferables).then(fromWireValue);\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if (last === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: \"ENDPOINT\" /* ENDPOINT */\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"APPLY\" /* APPLY */,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"CONSTRUCT\" /* CONSTRUCT */,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    }\n  });\n  return proxy;\n}\nfunction myFlat(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map(v => v[0]), myFlat(processed.map(v => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\nfunction proxy(obj) {\n  return Object.assign(obj, {\n    [proxyMarker]: true\n  });\n}\nfunction windowEndpoint(w) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self;\n  let targetOrigin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"*\";\n  return {\n    postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context)\n  };\n}\nfunction toWireValue(value) {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [{\n        type: \"HANDLER\" /* HANDLER */,\n        name,\n        value: serializedValue\n      }, transferables];\n    }\n  }\n  return [{\n    type: \"RAW\" /* RAW */,\n    value\n  }, transferCache.get(value) || []];\n}\nfunction fromWireValue(value) {\n  switch (value.type) {\n    case \"HANDLER\" /* HANDLER */:\n      return transferHandlers.get(value.name).deserialize(value.value);\n    case \"RAW\" /* RAW */:\n      return value.value;\n  }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n  return new Promise(resolve => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l);\n      resolve(ev.data);\n    });\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage(Object.assign({\n      id\n    }, msg), transfers);\n  });\n}\nfunction generateUUID() {\n  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };","map":{"version":3,"mappings":"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","names":["proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","proxyTransferHandler","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","throwTransferHandler","value","serialized","Error","isError","message","name","stack","Object","assign","transferHandlers","Map","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","isMessagePort","endpoint","constructor","close","target","createProxy","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","get","_target","requestResponseMessage","p","toString","length","r","bind","set","_thisArg","rawArgumentList","last","processArguments","construct","myFlat","arr","Array","prototype","concat","processed","v","transferCache","WeakMap","transfers","windowEndpoint","w","context","targetOrigin","msg","handler","serializedValue","generateUUID","l","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join"],"sources":["C:\\wamp64\\www\\connect-four-game-main\\node_modules\\comlink\\src\\comlink.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n"]},"metadata":{},"sourceType":"module"}