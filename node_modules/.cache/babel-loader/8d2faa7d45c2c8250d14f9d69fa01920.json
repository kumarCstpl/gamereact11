{"ast":null,"code":"import React from'react';import{WinneroWrapper,WinnerName,WinnerText}from'./WinnerStyles';import{SmallButton}from'../smallButton/SmallButton';import{useAppDispatch}from'../../../store/hooks';import{playAgain}from'../../../store/gameSlice';import{useSelector}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Winner=function Winner(){var dispatch=useAppDispatch();var game=useSelector(function(state){return state.game;});// if it is tie we render no name and status tie\n// it there is a winner we render correct player name and status wins\nvar name='';var status='tie';if(game.winner&&game.winner!=='tie'){name=game[game.winner].name;// check for gramma\nstatus=name==='You'?'win':'wins';}// Play again button handler\nvar playAgainHandler=function playAgainHandler(){dispatch(playAgain());};return/*#__PURE__*/_jsxs(WinneroWrapper,{\"data-testid\":\"winner\",children:[/*#__PURE__*/_jsx(WinnerName,{\"data-testid\":\"winner-name\",children:name}),/*#__PURE__*/_jsx(WinnerText,{\"data-testid\":\"game-status\",children:status}),/*#__PURE__*/_jsx(SmallButton,{onClick:playAgainHandler,children:\"Play Again\"})]});};export default Winner;","map":{"version":3,"names":["React","WinneroWrapper","WinnerName","WinnerText","SmallButton","useAppDispatch","playAgain","useSelector","Winner","dispatch","game","state","name","status","winner","playAgainHandler"],"sources":["C:/wamp64/www/gamereact11/src/components/UI/winner/Winner.tsx"],"sourcesContent":["import React from 'react';\n\nimport { WinneroWrapper, WinnerName, WinnerText } from './WinnerStyles';\nimport { SmallButton } from '../smallButton/SmallButton';\nimport { useAppDispatch } from '../../../store/hooks';\nimport { playAgain } from '../../../store/gameSlice';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../store/store';\n\nconst Winner: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const game = useSelector((state: RootState) => state.game);\n\n  // if it is tie we render no name and status tie\n  // it there is a winner we render correct player name and status wins\n  let name = '';\n  let status = 'tie';\n  if (game.winner && game.winner !== 'tie') {\n    name = game[game.winner].name;\n    // check for gramma\n    status = name === 'You' ? 'win' : 'wins';\n  }\n\n  // Play again button handler\n  const playAgainHandler = () => {\n    dispatch(playAgain());\n  };\n\n  return (\n    <WinneroWrapper data-testid=\"winner\">\n      <WinnerName data-testid=\"winner-name\">{name}</WinnerName>\n      <WinnerText data-testid=\"game-status\">{status}</WinnerText>\n      <SmallButton onClick={playAgainHandler}>Play Again</SmallButton>\n    </WinneroWrapper>\n  );\n};\n\nexport default Winner;\n"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CAEzB,OAASC,cAAc,CAAEC,UAAU,CAAEC,UAAU,KAAQ,gBAAgB,CACvE,OAASC,WAAW,KAAQ,4BAA4B,CACxD,OAASC,cAAc,KAAQ,sBAAsB,CACrD,OAASC,SAAS,KAAQ,0BAA0B,CACpD,OAASC,WAAW,KAAQ,aAAa,CAAC,wFAG1C,GAAMC,OAAgB,CAAG,QAAnBA,OAAgB,EAAS,CAC7B,GAAMC,SAAQ,CAAGJ,cAAc,EAAE,CACjC,GAAMK,KAAI,CAAGH,WAAW,CAAC,SAACI,KAAgB,QAAKA,MAAK,CAACD,IAAI,GAAC,CAE1D;AACA;AACA,GAAIE,KAAI,CAAG,EAAE,CACb,GAAIC,OAAM,CAAG,KAAK,CAClB,GAAIH,IAAI,CAACI,MAAM,EAAIJ,IAAI,CAACI,MAAM,GAAK,KAAK,CAAE,CACxCF,IAAI,CAAGF,IAAI,CAACA,IAAI,CAACI,MAAM,CAAC,CAACF,IAAI,CAC7B;AACAC,MAAM,CAAGD,IAAI,GAAK,KAAK,CAAG,KAAK,CAAG,MAAM,CAC1C,CAEA;AACA,GAAMG,iBAAgB,CAAG,QAAnBA,iBAAgB,EAAS,CAC7BN,QAAQ,CAACH,SAAS,EAAE,CAAC,CACvB,CAAC,CAED,mBACE,MAAC,cAAc,EAAC,cAAY,QAAQ,wBAClC,KAAC,UAAU,EAAC,cAAY,aAAa,UAAEM,IAAI,EAAc,cACzD,KAAC,UAAU,EAAC,cAAY,aAAa,UAAEC,MAAM,EAAc,cAC3D,KAAC,WAAW,EAAC,OAAO,CAAEE,gBAAiB,wBAAyB,GACjD,CAErB,CAAC,CAED,cAAeP,OAAM"},"metadata":{},"sourceType":"module"}