{"ast":null,"code":"import React from'react';import{GameGrid,GridCell}from'./GridStyles';import useWindowWidth from'../../../hooks/useWindowWidth';import CounterRedLarge from'../../../assets/images/counter-red-large.svg';import CounterYellowLarge from'../../../assets/images/counter-yellow-large.svg';import CounterRedSmall from'../../../assets/images/counter-red-small.svg';import CounterYellowSmall from'../../../assets/images/counter-yellow-small.svg';import{AnimatePresence}from'framer-motion';import Counter from'../../UI/counter/Counter';import{useAppSelector}from'../../../store/hooks';import{selectWinnigCombination,selectGameBoard}from'../../../store/gameSlice';import{jsx as _jsx}from\"react/jsx-runtime\";var counters={red:{large:CounterRedLarge,small:CounterRedSmall},yellow:{large:CounterYellowLarge,small:CounterYellowSmall}};var CounterGrid=function CounterGrid(){var windowWidth=useWindowWidth();var winningCobination=useAppSelector(selectWinnigCombination);var gameGrid=useAppSelector(selectGameBoard);// to render needed size of svg\nvar size=windowWidth>760?'large':'small';return/*#__PURE__*/_jsx(AnimatePresence,{children:/*#__PURE__*/_jsx(GameGrid,{\"data-testid\":\"counterGrid\",children:gameGrid.map(function(row,i){return row.map(function(counter,j){return/*#__PURE__*/_jsx(GridCell,{\"data-testid\":counter||'empty',children:counter&&/*#__PURE__*/_jsx(Counter// @ts-ignore\n,{initial:{opacity:0},animate:{opacity:1},transition:{duration:4}// bg based on size and color\n,bg:counter&&counters[counter][size],isWin:winningCobination[\"\".concat(i).concat(j)],row:i})},\"\".concat(i).concat(j));});})})});};export default CounterGrid;","map":{"version":3,"names":["React","GameGrid","GridCell","useWindowWidth","CounterRedLarge","CounterYellowLarge","CounterRedSmall","CounterYellowSmall","AnimatePresence","Counter","useAppSelector","selectWinnigCombination","selectGameBoard","counters","red","large","small","yellow","CounterGrid","windowWidth","winningCobination","gameGrid","size","map","row","i","counter","j","opacity","duration"],"sources":["C:/wamp64/www/gamereact11/src/components/game/counterGrid/CounterGrid.tsx"],"sourcesContent":["import React from 'react';\n\nimport { GameGrid, GridCell } from './GridStyles';\nimport useWindowWidth from '../../../hooks/useWindowWidth';\nimport CounterRedLarge from '../../../assets/images/counter-red-large.svg';\nimport CounterYellowLarge from '../../../assets/images/counter-yellow-large.svg';\nimport CounterRedSmall from '../../../assets/images/counter-red-small.svg';\nimport CounterYellowSmall from '../../../assets/images/counter-yellow-small.svg';\nimport { AnimatePresence } from 'framer-motion';\n\nimport Counter from '../../UI/counter/Counter';\nimport { useAppSelector } from '../../../store/hooks';\nimport {\n  selectWinnigCombination,\n  selectGameBoard,\n} from '../../../store/gameSlice';\n\ntype countersType = {\n  [key: string]: {\n    [key: string]: string;\n  };\n};\n\nconst counters: countersType = {\n  red: {\n    large: CounterRedLarge,\n    small: CounterRedSmall,\n  },\n  yellow: {\n    large: CounterYellowLarge,\n    small: CounterYellowSmall,\n  },\n};\n\nconst CounterGrid: React.FC = () => {\n  const windowWidth = useWindowWidth();\n  const winningCobination = useAppSelector(selectWinnigCombination);\n  const gameGrid = useAppSelector(selectGameBoard);\n\n  // to render needed size of svg\n  const size = windowWidth > 760 ? 'large' : 'small';\n\n  return (\n    <AnimatePresence>\n      <GameGrid data-testid=\"counterGrid\">\n        {gameGrid.map((row, i) =>\n          row.map((counter, j) => (\n            <GridCell key={`${i}${j}`} data-testid={counter || 'empty'}>\n              {counter && (\n                <Counter\n                  // @ts-ignore\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 4 }}\n                  // bg based on size and color\n                  bg={counter && counters[counter][size]}\n                  isWin={winningCobination[`${i}${j}`]}\n                  row={i}\n                />\n              )}\n            </GridCell>\n          ))\n        )}\n      </GameGrid>\n    </AnimatePresence>\n  );\n};\n\nexport default CounterGrid;\n"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CAEzB,OAASC,QAAQ,CAAEC,QAAQ,KAAQ,cAAc,CACjD,MAAOC,eAAc,KAAM,+BAA+B,CAC1D,MAAOC,gBAAe,KAAM,8CAA8C,CAC1E,MAAOC,mBAAkB,KAAM,iDAAiD,CAChF,MAAOC,gBAAe,KAAM,8CAA8C,CAC1E,MAAOC,mBAAkB,KAAM,iDAAiD,CAChF,OAASC,eAAe,KAAQ,eAAe,CAE/C,MAAOC,QAAO,KAAM,0BAA0B,CAC9C,OAASC,cAAc,KAAQ,sBAAsB,CACrD,OACEC,uBAAuB,CACvBC,eAAe,KACV,0BAA0B,CAAC,2CAQlC,GAAMC,SAAsB,CAAG,CAC7BC,GAAG,CAAE,CACHC,KAAK,CAAEX,eAAe,CACtBY,KAAK,CAAEV,eACT,CAAC,CACDW,MAAM,CAAE,CACNF,KAAK,CAAEV,kBAAkB,CACzBW,KAAK,CAAET,kBACT,CACF,CAAC,CAED,GAAMW,YAAqB,CAAG,QAAxBA,YAAqB,EAAS,CAClC,GAAMC,YAAW,CAAGhB,cAAc,EAAE,CACpC,GAAMiB,kBAAiB,CAAGV,cAAc,CAACC,uBAAuB,CAAC,CACjE,GAAMU,SAAQ,CAAGX,cAAc,CAACE,eAAe,CAAC,CAEhD;AACA,GAAMU,KAAI,CAAGH,WAAW,CAAG,GAAG,CAAG,OAAO,CAAG,OAAO,CAElD,mBACE,KAAC,eAAe,wBACd,KAAC,QAAQ,EAAC,cAAY,aAAa,UAChCE,QAAQ,CAACE,GAAG,CAAC,SAACC,GAAG,CAAEC,CAAC,QACnBD,IAAG,CAACD,GAAG,CAAC,SAACG,OAAO,CAAEC,CAAC,qBACjB,KAAC,QAAQ,EAAkB,cAAaD,OAAO,EAAI,OAAQ,UACxDA,OAAO,eACN,KAAC,OACC;AAAA,EACA,OAAO,CAAE,CAAEE,OAAO,CAAE,CAAE,CAAE,CACxB,OAAO,CAAE,CAAEA,OAAO,CAAE,CAAE,CAAE,CACxB,UAAU,CAAE,CAAEC,QAAQ,CAAE,CAAE,CAC1B;AAAA,CACA,EAAE,CAAEH,OAAO,EAAIb,QAAQ,CAACa,OAAO,CAAC,CAACJ,IAAI,CAAE,CACvC,KAAK,CAAEF,iBAAiB,WAAIK,CAAC,SAAGE,CAAC,EAAI,CACrC,GAAG,CAAEF,CAAE,EAEV,YAZeA,CAAC,SAAGE,CAAC,EAaZ,EACZ,CAAC,GACH,EACQ,EACK,CAEtB,CAAC,CAED,cAAeT,YAAW"},"metadata":{},"sourceType":"module"}