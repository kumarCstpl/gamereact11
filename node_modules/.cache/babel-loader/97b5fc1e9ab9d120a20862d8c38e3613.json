{"ast":null,"code":"export const scorePosition = (row, column, deltaY, deltaX, gameGrid, gameScore) => {\n  let playerPoints = 0;\n  let CPUPoints = 0;\n\n  // Determine score through amount of available counters\n\n  for (let i = 0; i < 4; i++) {\n    if (gameGrid[row][column] === 'red') {\n      // Add for each human counter\n      playerPoints++;\n    } else if (gameGrid[row][column] === 'yellow') {\n      // Add for each cpu counter\n      CPUPoints++;\n    }\n\n    // Moving through our board\n    row += deltaY;\n    column += deltaX;\n  }\n\n  // Marking winning/returning score\n  if (playerPoints === 4) {\n    // Computer won (Infiniry)\n    return -gameScore;\n  } else if (CPUPoints === 4) {\n    // Human won (-Infiniry)\n    return gameScore;\n  } else {\n    // Return normal points\n    return CPUPoints;\n  }\n};\nexport const boardScore = (gameGrid, gameScore) => {\n  let gameRows = 6;\n  let gameColumns = 7;\n  let points = 0;\n  let verticalPoints = 0;\n  let horizontalPoints = 0;\n  let diagonalPoints1 = 0;\n  let diagonalPoints2 = 0;\n\n  // Board-size: 7x6 (height x width)\n  // Array indices begin with 0\n  // => e.g. height: 0, 1, 2, 3, 4, 5\n\n  // Vertical points\n  // Check each column for vertical score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [x][x][ ][ ][ ][ ][ ] 1\n  // [x][x][x][ ][ ][ ][ ] 2\n  // [x][x][x][ ][ ][ ][ ] 3\n  // [ ][x][x][ ][ ][ ][ ] 4\n  // [ ][ ][x][ ][ ][ ][ ] 5\n\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 0, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      verticalPoints += score;\n    }\n  }\n\n  // Horizontal points\n  // Check each row's score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][x][x][x][ ][ ][ ] 0\n  // [ ][x][x][x][x][ ][ ] 1\n  // [ ][ ][x][x][x][x][ ] 2\n  // [ ][ ][ ][x][x][x][x] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows; row++) {\n    //  Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 0, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      horizontalPoints += score;\n    }\n  }\n\n  // Diagonal points 1 (left-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [ ][x][ ][ ][ ][ ][ ] 1\n  // [ ][ ][x][ ][ ][ ][ ] 2\n  // [ ][ ][ ][x][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints1 += score;\n    }\n  }\n\n  // Diagonal points 2 (right-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [ ][ ][ ][x][ ][ ][ ] 0\n  // [ ][ ][x][ ][ ][ ][ ] 1\n  // [ ][x][ ][ ][ ][ ][ ] 2\n  // [x][ ][ ][ ][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (var row = 3; row < gameRows; row++) {\n    // Check for each column\n    for (var column = 0; column <= gameColumns - 4; column++) {\n      // Rate the column and add to the points\n      var score = scorePosition(row, column, -1, +1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints2 += score;\n    }\n  }\n  points = horizontalPoints + verticalPoints + diagonalPoints1 + diagonalPoints2;\n  return points;\n};","map":{"version":3,"names":["scorePosition","row","column","deltaY","deltaX","gameGrid","gameScore","playerPoints","CPUPoints","i","boardScore","gameRows","gameColumns","points","verticalPoints","horizontalPoints","diagonalPoints1","diagonalPoints2","score"],"sources":["C:/wamp64/www/gamereact11/src/helpers/boardScore.ts"],"sourcesContent":["import { counter } from './helpers';\n\nexport const scorePosition = (\n  row: number,\n  column: number,\n  deltaY: number,\n  deltaX: number,\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let playerPoints = 0;\n  let CPUPoints = 0;\n\n  // Determine score through amount of available counters\n\n  for (let i = 0; i < 4; i++) {\n    if (gameGrid[row][column] === 'red') {\n      // Add for each human counter\n      playerPoints++;\n    } else if (gameGrid[row][column] === 'yellow') {\n      // Add for each cpu counter\n      CPUPoints++;\n    }\n\n    // Moving through our board\n    row += deltaY;\n    column += deltaX;\n  }\n\n  // Marking winning/returning score\n  if (playerPoints === 4) {\n    // Computer won (Infiniry)\n    return -gameScore;\n  } else if (CPUPoints === 4) {\n    // Human won (-Infiniry)\n    return gameScore;\n  } else {\n    // Return normal points\n    return CPUPoints;\n  }\n};\n\nexport const boardScore = (\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let gameRows = 6;\n  let gameColumns = 7;\n\n  let points = 0;\n\n  let verticalPoints = 0;\n  let horizontalPoints = 0;\n  let diagonalPoints1 = 0;\n  let diagonalPoints2 = 0;\n\n  // Board-size: 7x6 (height x width)\n  // Array indices begin with 0\n  // => e.g. height: 0, 1, 2, 3, 4, 5\n\n  // Vertical points\n  // Check each column for vertical score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [x][x][ ][ ][ ][ ][ ] 1\n  // [x][x][x][ ][ ][ ][ ] 2\n  // [x][x][x][ ][ ][ ][ ] 3\n  // [ ][x][x][ ][ ][ ][ ] 4\n  // [ ][ ][x][ ][ ][ ][ ] 5\n\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 0, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      verticalPoints += score;\n    }\n  }\n\n  // Horizontal points\n  // Check each row's score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][x][x][x][ ][ ][ ] 0\n  // [ ][x][x][x][x][ ][ ] 1\n  // [ ][ ][x][x][x][x][ ] 2\n  // [ ][ ][ ][x][x][x][x] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows; row++) {\n    //  Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 0, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      horizontalPoints += score;\n    }\n  }\n\n  // Diagonal points 1 (left-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [ ][x][ ][ ][ ][ ][ ] 1\n  // [ ][ ][x][ ][ ][ ][ ] 2\n  // [ ][ ][ ][x][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints1 += score;\n    }\n  }\n\n  // Diagonal points 2 (right-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [ ][ ][ ][x][ ][ ][ ] 0\n  // [ ][ ][x][ ][ ][ ][ ] 1\n  // [ ][x][ ][ ][ ][ ][ ] 2\n  // [x][ ][ ][ ][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (var row = 3; row < gameRows; row++) {\n    // Check for each column\n    for (var column = 0; column <= gameColumns - 4; column++) {\n      // Rate the column and add to the points\n      var score = scorePosition(row, column, -1, +1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints2 += score;\n    }\n  }\n\n  points =\n    horizontalPoints + verticalPoints + diagonalPoints1 + diagonalPoints2;\n\n  return points;\n};\n"],"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAG,CAC3BC,GAAW,EACXC,MAAc,EACdC,MAAc,EACdC,MAAc,EACdC,QAAqB,EACrBC,SAAiB,KACN;EACX,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,SAAS,GAAG,CAAC;;EAEjB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIJ,QAAQ,CAACJ,GAAG,CAAC,CAACC,MAAM,CAAC,KAAK,KAAK,EAAE;MACnC;MACAK,YAAY,EAAE;IAChB,CAAC,MAAM,IAAIF,QAAQ,CAACJ,GAAG,CAAC,CAACC,MAAM,CAAC,KAAK,QAAQ,EAAE;MAC7C;MACAM,SAAS,EAAE;IACb;;IAEA;IACAP,GAAG,IAAIE,MAAM;IACbD,MAAM,IAAIE,MAAM;EAClB;;EAEA;EACA,IAAIG,YAAY,KAAK,CAAC,EAAE;IACtB;IACA,OAAO,CAACD,SAAS;EACnB,CAAC,MAAM,IAAIE,SAAS,KAAK,CAAC,EAAE;IAC1B;IACA,OAAOF,SAAS;EAClB,CAAC,MAAM;IACL;IACA,OAAOE,SAAS;EAClB;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,CACxBL,QAAqB,EACrBC,SAAiB,KACN;EACX,IAAIK,QAAQ,GAAG,CAAC;EAChB,IAAIC,WAAW,GAAG,CAAC;EAEnB,IAAIC,MAAM,GAAG,CAAC;EAEd,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,gBAAgB,GAAG,CAAC;EACxB,IAAIC,eAAe,GAAG,CAAC;EACvB,IAAIC,eAAe,GAAG,CAAC;;EAEvB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,KAAK,IAAIhB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGU,QAAQ,GAAG,CAAC,EAAEV,GAAG,EAAE,EAAE;IAC3C;IACA,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGU,WAAW,EAAEV,MAAM,EAAE,EAAE;MACnD;MACA,IAAIgB,KAAK,GAAGlB,aAAa,CAACC,GAAG,EAAEC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEG,QAAQ,EAAEC,SAAS,CAAC;MACjE,IAAIY,KAAK,KAAKZ,SAAS,EAAE,OAAOA,SAAS;MACzC,IAAIY,KAAK,KAAK,CAACZ,SAAS,EAAE,OAAO,CAACA,SAAS;MAC3CQ,cAAc,IAAII,KAAK;IACzB;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,KAAK,IAAIjB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGU,QAAQ,EAAEV,GAAG,EAAE,EAAE;IACvC;IACA,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGU,WAAW,GAAG,CAAC,EAAEV,MAAM,EAAE,EAAE;MACvD;MACA,IAAIgB,KAAK,GAAGlB,aAAa,CAACC,GAAG,EAAEC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEG,QAAQ,EAAEC,SAAS,CAAC;MACjE,IAAIY,KAAK,KAAKZ,SAAS,EAAE,OAAOA,SAAS;MACzC,IAAIY,KAAK,KAAK,CAACZ,SAAS,EAAE,OAAO,CAACA,SAAS;MAC3CS,gBAAgB,IAAIG,KAAK;IAC3B;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,KAAK,IAAIjB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGU,QAAQ,GAAG,CAAC,EAAEV,GAAG,EAAE,EAAE;IAC3C;IACA,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGU,WAAW,GAAG,CAAC,EAAEV,MAAM,EAAE,EAAE;MACvD;MACA,IAAIgB,KAAK,GAAGlB,aAAa,CAACC,GAAG,EAAEC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEG,QAAQ,EAAEC,SAAS,CAAC;MACjE,IAAIY,KAAK,KAAKZ,SAAS,EAAE,OAAOA,SAAS;MACzC,IAAIY,KAAK,KAAK,CAACZ,SAAS,EAAE,OAAO,CAACA,SAAS;MAC3CU,eAAe,IAAIE,KAAK;IAC1B;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,KAAK,IAAIjB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGU,QAAQ,EAAEV,GAAG,EAAE,EAAE;IACvC;IACA,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,IAAIU,WAAW,GAAG,CAAC,EAAEV,MAAM,EAAE,EAAE;MACxD;MACA,IAAIgB,KAAK,GAAGlB,aAAa,CAACC,GAAG,EAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEG,QAAQ,EAAEC,SAAS,CAAC;MACnE,IAAIY,KAAK,KAAKZ,SAAS,EAAE,OAAOA,SAAS;MACzC,IAAIY,KAAK,KAAK,CAACZ,SAAS,EAAE,OAAO,CAACA,SAAS;MAC3CW,eAAe,IAAIC,KAAK;IAC1B;EACF;EAEAL,MAAM,GACJE,gBAAgB,GAAGD,cAAc,GAAGE,eAAe,GAAGC,eAAe;EAEvE,OAAOJ,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module"}