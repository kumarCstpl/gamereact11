{"ast":null,"code":"export var scorePosition=function scorePosition(row,column,deltaY,deltaX,gameGrid,gameScore){var playerPoints=0;var CPUPoints=0;// Determine score through amount of available counters\nfor(var i=0;i<4;i++){if(gameGrid[row][column]==='red'){// Add for each human counter\nplayerPoints++;}else if(gameGrid[row][column]==='yellow'){// Add for each cpu counter\nCPUPoints++;}// Moving through our board\nrow+=deltaY;column+=deltaX;}// Marking winning/returning score\nif(playerPoints===4){// Computer won (Infiniry)\nreturn-gameScore;}else if(CPUPoints===4){// Human won (-Infiniry)\nreturn gameScore;}else{// Return normal points\nreturn CPUPoints;}};export var boardScore=function boardScore(gameGrid,gameScore){var gameRows=6;var gameColumns=7;var points=0;var verticalPoints=0;var horizontalPoints=0;var diagonalPoints1=0;var diagonalPoints2=0;// Board-size: 7x6 (height x width)\n// Array indices begin with 0\n// => e.g. height: 0, 1, 2, 3, 4, 5\n// Vertical points\n// Check each column for vertical score\n//\n// Possible situations\n//  0  1  2  3  4  5  6\n// [x][ ][ ][ ][ ][ ][ ] 0\n// [x][x][ ][ ][ ][ ][ ] 1\n// [x][x][x][ ][ ][ ][ ] 2\n// [x][x][x][ ][ ][ ][ ] 3\n// [ ][x][x][ ][ ][ ][ ] 4\n// [ ][ ][x][ ][ ][ ][ ] 5\nfor(var _row=0;_row<gameRows-3;_row++){// Check for each column\nfor(var _column=0;_column<gameColumns;_column++){// Rate the column and add to the points\nvar _score=scorePosition(_row,_column,1,0,gameGrid,gameScore);if(_score===gameScore)return gameScore;if(_score===-gameScore)return-gameScore;verticalPoints+=_score;}}// Horizontal points\n// Check each row's score\n//\n// Possible situations\n//  0  1  2  3  4  5  6\n// [x][x][x][x][ ][ ][ ] 0\n// [ ][x][x][x][x][ ][ ] 1\n// [ ][ ][x][x][x][x][ ] 2\n// [ ][ ][ ][x][x][x][x] 3\n// [ ][ ][ ][ ][ ][ ][ ] 4\n// [ ][ ][ ][ ][ ][ ][ ] 5\nfor(var _row2=0;_row2<gameRows;_row2++){//  Check for each column\nfor(var _column2=0;_column2<gameColumns-3;_column2++){// Rate the column and add to the points\nvar _score2=scorePosition(_row2,_column2,0,1,gameGrid,gameScore);if(_score2===gameScore)return gameScore;if(_score2===-gameScore)return-gameScore;horizontalPoints+=_score2;}}// Diagonal points 1 (left-bottom)\n//\n// Possible situation\n//  0  1  2  3  4  5  6\n// [x][ ][ ][ ][ ][ ][ ] 0\n// [ ][x][ ][ ][ ][ ][ ] 1\n// [ ][ ][x][ ][ ][ ][ ] 2\n// [ ][ ][ ][x][ ][ ][ ] 3\n// [ ][ ][ ][ ][ ][ ][ ] 4\n// [ ][ ][ ][ ][ ][ ][ ] 5\nfor(var _row3=0;_row3<gameRows-3;_row3++){// Check for each column\nfor(var _column3=0;_column3<gameColumns-3;_column3++){// Rate the column and add to the points\nvar _score3=scorePosition(_row3,_column3,1,1,gameGrid,gameScore);if(_score3===gameScore)return gameScore;if(_score3===-gameScore)return-gameScore;diagonalPoints1+=_score3;}}// Diagonal points 2 (right-bottom)\n//\n// Possible situation\n//  0  1  2  3  4  5  6\n// [ ][ ][ ][x][ ][ ][ ] 0\n// [ ][ ][x][ ][ ][ ][ ] 1\n// [ ][x][ ][ ][ ][ ][ ] 2\n// [x][ ][ ][ ][ ][ ][ ] 3\n// [ ][ ][ ][ ][ ][ ][ ] 4\n// [ ][ ][ ][ ][ ][ ][ ] 5\nfor(var row=3;row<gameRows;row++){// Check for each column\nfor(var column=0;column<=gameColumns-4;column++){// Rate the column and add to the points\nvar score=scorePosition(row,column,-1,+1,gameGrid,gameScore);if(score===gameScore)return gameScore;if(score===-gameScore)return-gameScore;diagonalPoints2+=score;}}points=horizontalPoints+verticalPoints+diagonalPoints1+diagonalPoints2;return points;};","map":{"version":3,"names":["scorePosition","row","column","deltaY","deltaX","gameGrid","gameScore","playerPoints","CPUPoints","i","boardScore","gameRows","gameColumns","points","verticalPoints","horizontalPoints","diagonalPoints1","diagonalPoints2","score"],"sources":["C:/wamp64/www/gamereact11/src/helpers/boardScore.ts"],"sourcesContent":["import { counter } from './helpers';\n\nexport const scorePosition = (\n  row: number,\n  column: number,\n  deltaY: number,\n  deltaX: number,\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let playerPoints = 0;\n  let CPUPoints = 0;\n\n  // Determine score through amount of available counters\n\n  for (let i = 0; i < 4; i++) {\n    if (gameGrid[row][column] === 'red') {\n      // Add for each human counter\n      playerPoints++;\n    } else if (gameGrid[row][column] === 'yellow') {\n      // Add for each cpu counter\n      CPUPoints++;\n    }\n\n    // Moving through our board\n    row += deltaY;\n    column += deltaX;\n  }\n\n  // Marking winning/returning score\n  if (playerPoints === 4) {\n    // Computer won (Infiniry)\n    return -gameScore;\n  } else if (CPUPoints === 4) {\n    // Human won (-Infiniry)\n    return gameScore;\n  } else {\n    // Return normal points\n    return CPUPoints;\n  }\n};\n\nexport const boardScore = (\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let gameRows = 6;\n  let gameColumns = 7;\n\n  let points = 0;\n\n  let verticalPoints = 0;\n  let horizontalPoints = 0;\n  let diagonalPoints1 = 0;\n  let diagonalPoints2 = 0;\n\n  // Board-size: 7x6 (height x width)\n  // Array indices begin with 0\n  // => e.g. height: 0, 1, 2, 3, 4, 5\n\n  // Vertical points\n  // Check each column for vertical score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [x][x][ ][ ][ ][ ][ ] 1\n  // [x][x][x][ ][ ][ ][ ] 2\n  // [x][x][x][ ][ ][ ][ ] 3\n  // [ ][x][x][ ][ ][ ][ ] 4\n  // [ ][ ][x][ ][ ][ ][ ] 5\n\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 0, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      verticalPoints += score;\n    }\n  }\n\n  // Horizontal points\n  // Check each row's score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][x][x][x][ ][ ][ ] 0\n  // [ ][x][x][x][x][ ][ ] 1\n  // [ ][ ][x][x][x][x][ ] 2\n  // [ ][ ][ ][x][x][x][x] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows; row++) {\n    //  Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 0, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      horizontalPoints += score;\n    }\n  }\n\n  // Diagonal points 1 (left-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [ ][x][ ][ ][ ][ ][ ] 1\n  // [ ][ ][x][ ][ ][ ][ ] 2\n  // [ ][ ][ ][x][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints1 += score;\n    }\n  }\n\n  // Diagonal points 2 (right-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [ ][ ][ ][x][ ][ ][ ] 0\n  // [ ][ ][x][ ][ ][ ][ ] 1\n  // [ ][x][ ][ ][ ][ ][ ] 2\n  // [x][ ][ ][ ][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (var row = 3; row < gameRows; row++) {\n    // Check for each column\n    for (var column = 0; column <= gameColumns - 4; column++) {\n      // Rate the column and add to the points\n      var score = scorePosition(row, column, -1, +1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints2 += score;\n    }\n  }\n\n  points =\n    horizontalPoints + verticalPoints + diagonalPoints1 + diagonalPoints2;\n\n  return points;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}