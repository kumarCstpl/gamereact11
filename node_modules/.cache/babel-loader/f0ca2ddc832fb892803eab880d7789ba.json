{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\gamereact11\\\\src\\\\components\\\\game\\\\counterGrid\\\\CounterGrid.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { GameGrid, GridCell } from './GridStyles';\nimport useWindowWidth from '../../../hooks/useWindowWidth';\nimport CounterRedLarge from '../../../assets/images/counter-red-large.svg';\nimport CounterYellowLarge from '../../../assets/images/counter-yellow-large.svg';\nimport CounterRedSmall from '../../../assets/images/counter-red-small.svg';\nimport CounterYellowSmall from '../../../assets/images/counter-yellow-small.svg';\nimport { AnimatePresence } from 'framer-motion';\nimport Counter from '../../UI/counter/Counter';\nimport { useAppSelector } from '../../../store/hooks';\nimport { selectWinnigCombination, selectGameBoard } from '../../../store/gameSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst counters = {\n  red: {\n    large: CounterRedLarge,\n    small: CounterRedSmall\n  },\n  yellow: {\n    large: CounterYellowLarge,\n    small: CounterYellowSmall\n  }\n};\nconst CounterGrid = () => {\n  _s();\n  const windowWidth = useWindowWidth();\n  const winningCobination = useAppSelector(selectWinnigCombination);\n  const gameGrid = useAppSelector(selectGameBoard);\n\n  // to render needed size of svg\n  const size = windowWidth > 760 ? 'large' : 'small';\n  return /*#__PURE__*/_jsxDEV(AnimatePresence, {\n    children: /*#__PURE__*/_jsxDEV(GameGrid, {\n      \"data-testid\": \"counterGrid\",\n      children: gameGrid.map((row, i) => row.map((counter, j) => /*#__PURE__*/_jsxDEV(GridCell, {\n        \"data-testid\": counter || 'empty',\n        children: counter && /*#__PURE__*/_jsxDEV(Counter\n        // @ts-ignore\n        , {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            duration: 4\n          }\n          // bg based on size and color\n          ,\n          bg: counter && counters[counter][size],\n          isWin: winningCobination[`${i}${j}`],\n          row: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, `${i}${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(CounterGrid, \"e23PQDhkVGkV//yh6W7mllpeoCk=\", false, function () {\n  return [useWindowWidth, useAppSelector, useAppSelector];\n});\n_c = CounterGrid;\nexport default CounterGrid;\nvar _c;\n$RefreshReg$(_c, \"CounterGrid\");","map":{"version":3,"names":["React","GameGrid","GridCell","useWindowWidth","CounterRedLarge","CounterYellowLarge","CounterRedSmall","CounterYellowSmall","AnimatePresence","Counter","useAppSelector","selectWinnigCombination","selectGameBoard","counters","red","large","small","yellow","CounterGrid","windowWidth","winningCobination","gameGrid","size","map","row","i","counter","j","opacity","duration"],"sources":["C:/wamp64/www/gamereact11/src/components/game/counterGrid/CounterGrid.tsx"],"sourcesContent":["import React from 'react';\n\nimport { GameGrid, GridCell } from './GridStyles';\nimport useWindowWidth from '../../../hooks/useWindowWidth';\nimport CounterRedLarge from '../../../assets/images/counter-red-large.svg';\nimport CounterYellowLarge from '../../../assets/images/counter-yellow-large.svg';\nimport CounterRedSmall from '../../../assets/images/counter-red-small.svg';\nimport CounterYellowSmall from '../../../assets/images/counter-yellow-small.svg';\nimport { AnimatePresence } from 'framer-motion';\n\nimport Counter from '../../UI/counter/Counter';\nimport { useAppSelector } from '../../../store/hooks';\nimport {\n  selectWinnigCombination,\n  selectGameBoard,\n} from '../../../store/gameSlice';\n\ntype countersType = {\n  [key: string]: {\n    [key: string]: string;\n  };\n};\n\nconst counters: countersType = {\n  red: {\n    large: CounterRedLarge,\n    small: CounterRedSmall,\n  },\n  yellow: {\n    large: CounterYellowLarge,\n    small: CounterYellowSmall,\n  },\n};\n\nconst CounterGrid: React.FC = () => {\n  const windowWidth = useWindowWidth();\n  const winningCobination = useAppSelector(selectWinnigCombination);\n  const gameGrid = useAppSelector(selectGameBoard);\n\n  // to render needed size of svg\n  const size = windowWidth > 760 ? 'large' : 'small';\n\n  return (\n    <AnimatePresence>\n      <GameGrid data-testid=\"counterGrid\">\n        {gameGrid.map((row, i) =>\n          row.map((counter, j) => (\n            <GridCell key={`${i}${j}`} data-testid={counter || 'empty'}>\n              {counter && (\n                <Counter\n                  // @ts-ignore\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 4 }}\n                  // bg based on size and color\n                  bg={counter && counters[counter][size]}\n                  isWin={winningCobination[`${i}${j}`]}\n                  row={i}\n                />\n              )}\n            </GridCell>\n          ))\n        )}\n      </GameGrid>\n    </AnimatePresence>\n  );\n};\n\nexport default CounterGrid;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,cAAc;AACjD,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,kBAAkB,MAAM,iDAAiD;AAChF,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,kBAAkB,MAAM,iDAAiD;AAChF,SAASC,eAAe,QAAQ,eAAe;AAE/C,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SACEC,uBAAuB,EACvBC,eAAe,QACV,0BAA0B;AAAC;AAQlC,MAAMC,QAAsB,GAAG;EAC7BC,GAAG,EAAE;IACHC,KAAK,EAAEX,eAAe;IACtBY,KAAK,EAAEV;EACT,CAAC;EACDW,MAAM,EAAE;IACNF,KAAK,EAAEV,kBAAkB;IACzBW,KAAK,EAAET;EACT;AACF,CAAC;AAED,MAAMW,WAAqB,GAAG,MAAM;EAAA;EAClC,MAAMC,WAAW,GAAGhB,cAAc,EAAE;EACpC,MAAMiB,iBAAiB,GAAGV,cAAc,CAACC,uBAAuB,CAAC;EACjE,MAAMU,QAAQ,GAAGX,cAAc,CAACE,eAAe,CAAC;;EAEhD;EACA,MAAMU,IAAI,GAAGH,WAAW,GAAG,GAAG,GAAG,OAAO,GAAG,OAAO;EAElD,oBACE,QAAC,eAAe;IAAA,uBACd,QAAC,QAAQ;MAAC,eAAY,aAAa;MAAA,UAChCE,QAAQ,CAACE,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KACnBD,GAAG,CAACD,GAAG,CAAC,CAACG,OAAO,EAAEC,CAAC,kBACjB,QAAC,QAAQ;QAAkB,eAAaD,OAAO,IAAI,OAAQ;QAAA,UACxDA,OAAO,iBACN,QAAC;QACC;QAAA;UACA,OAAO,EAAE;YAAEE,OAAO,EAAE;UAAE,CAAE;UACxB,OAAO,EAAE;YAAEA,OAAO,EAAE;UAAE,CAAE;UACxB,UAAU,EAAE;YAAEC,QAAQ,EAAE;UAAE;UAC1B;UAAA;UACA,EAAE,EAAEH,OAAO,IAAIb,QAAQ,CAACa,OAAO,CAAC,CAACJ,IAAI,CAAE;UACvC,KAAK,EAAEF,iBAAiB,CAAE,GAAEK,CAAE,GAAEE,CAAE,EAAC,CAAE;UACrC,GAAG,EAAEF;QAAE;UAAA;UAAA;UAAA;QAAA;MAEV,GAZa,GAAEA,CAAE,GAAEE,CAAE,EAAC;QAAA;QAAA;QAAA;MAAA,QAc1B,CAAC;IACH;MAAA;MAAA;MAAA;IAAA;EACQ;IAAA;IAAA;IAAA;EAAA,QACK;AAEtB,CAAC;AAAC,GAhCIT,WAAqB;EAAA,QACLf,cAAc,EACRO,cAAc,EACvBA,cAAc;AAAA;AAAA,KAH3BQ,WAAqB;AAkC3B,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}