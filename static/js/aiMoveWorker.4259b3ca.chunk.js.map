{"version":3,"file":"static/js/aiMoveWorker.4259b3ca.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/comlink/src/comlink.ts","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","helpers/helpers.ts","helpers/boardScore.ts","helpers/findRowToLandCounter.ts","helpers/aiMove.ts","helpers/worker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export type counter = string | null;\n\nexport const getCounter = (\n  row: number,\n  col: number,\n  gameGrid: counter[][]\n): counter => {\n  if (!gameGrid[row] || !gameGrid[row][col]) return null;\n  return gameGrid[row][col];\n};\n\nexport const copyBoard = (gameGrid: counter[][]) => {\n  const copyBoard = gameGrid.map((row) => [...row]);\n  return copyBoard;\n};\n\nexport const boardIsFull = (gameGrid: counter[][]) => {\n  for (let i = 0; i < 7; i++) {\n    if (!gameGrid[0][i]) return false;\n  }\n  return true;\n};\n\nexport const createGrid = () => {\n  const grid: counter[][] = [...Array(6)].map(() => Array(7).fill(null));\n\n  return grid;\n};\n","import { counter } from './helpers';\n\nexport const scorePosition = (\n  row: number,\n  column: number,\n  deltaY: number,\n  deltaX: number,\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let playerPoints = 0;\n  let CPUPoints = 0;\n\n  // Determine score through amount of available counters\n\n  for (let i = 0; i < 4; i++) {\n    if (gameGrid[row][column] === 'red') {\n      // Add for each human counter\n      playerPoints++;\n    } else if (gameGrid[row][column] === 'yellow') {\n      // Add for each cpu counter\n      CPUPoints++;\n    }\n\n    // Moving through our board\n    row += deltaY;\n    column += deltaX;\n  }\n\n  // Marking winning/returning score\n  if (playerPoints === 4) {\n    // Computer won (Infiniry)\n    return -gameScore;\n  } else if (CPUPoints === 4) {\n    // Human won (-Infiniry)\n    return gameScore;\n  } else {\n    // Return normal points\n    return CPUPoints;\n  }\n};\n\nexport const boardScore = (\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let gameRows = 6;\n  let gameColumns = 7;\n\n  let points = 0;\n\n  let verticalPoints = 0;\n  let horizontalPoints = 0;\n  let diagonalPoints1 = 0;\n  let diagonalPoints2 = 0;\n\n  // Board-size: 7x6 (height x width)\n  // Array indices begin with 0\n  // => e.g. height: 0, 1, 2, 3, 4, 5\n\n  // Vertical points\n  // Check each column for vertical score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [x][x][ ][ ][ ][ ][ ] 1\n  // [x][x][x][ ][ ][ ][ ] 2\n  // [x][x][x][ ][ ][ ][ ] 3\n  // [ ][x][x][ ][ ][ ][ ] 4\n  // [ ][ ][x][ ][ ][ ][ ] 5\n\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 0, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      verticalPoints += score;\n    }\n  }\n\n  // Horizontal points\n  // Check each row's score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][x][x][x][ ][ ][ ] 0\n  // [ ][x][x][x][x][ ][ ] 1\n  // [ ][ ][x][x][x][x][ ] 2\n  // [ ][ ][ ][x][x][x][x] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows; row++) {\n    //  Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 0, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      horizontalPoints += score;\n    }\n  }\n\n  // Diagonal points 1 (left-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [ ][x][ ][ ][ ][ ][ ] 1\n  // [ ][ ][x][ ][ ][ ][ ] 2\n  // [ ][ ][ ][x][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints1 += score;\n    }\n  }\n\n  // Diagonal points 2 (right-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [ ][ ][ ][x][ ][ ][ ] 0\n  // [ ][ ][x][ ][ ][ ][ ] 1\n  // [ ][x][ ][ ][ ][ ][ ] 2\n  // [x][ ][ ][ ][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (var row = 3; row < gameRows; row++) {\n    // Check for each column\n    for (var column = 0; column <= gameColumns - 4; column++) {\n      // Rate the column and add to the points\n      var score = scorePosition(row, column, -1, +1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints2 += score;\n    }\n  }\n\n  points =\n    horizontalPoints + verticalPoints + diagonalPoints1 + diagonalPoints2;\n\n  return points;\n};\n","import { counter } from './helpers';\n\nexport const findRowToLandCounter = (\n  grid: counter[][],\n  column: number\n): number => {\n  let row: number = 0;\n  // from top to bottom we search for occupied cell\n  while (row < 5 && !grid[row + 1][column]) {\n    row++;\n  }\n\n  return row;\n};\n","import { counter } from './helpers';\nimport { copyBoard } from './helpers';\nimport { boardScore } from './boardScore';\nimport { findRowToLandCounter } from './findRowToLandCounter';\nimport { boardIsFull } from './helpers';\n\nexport function maximizePlay(\n  gameGrid: counter[][],\n  depth: number,\n  gameScore: number,\n  alpha?: number,\n  beta?: number\n): [null | number, number] {\n  let gameColumns = 7;\n  //  check current board score for cpu\n  const score = boardScore(gameGrid, gameScore);\n  // stop calculation if\n  // -we reached depth 0\n  //  gameScore is Infinity cpu wins\n  //  gameScore is -Infinity player wins\n  //  there is no more space\n  if (\n    depth === 0 ||\n    score === gameScore ||\n    score === -gameScore ||\n    boardIsFull(gameGrid)\n  )\n    return [null, score];\n\n  // current best Column, Score\n  let max: [null | number, number] = [null, -Infinity];\n\n  //   For all possible moves\n  for (let column = 0; column < gameColumns; column++) {\n    let new_board = copyBoard(gameGrid); // Create new board\n    const row = findRowToLandCounter(new_board, column);\n    //  check if this place if empty\n    if (!new_board[row][column]) {\n      // plave counter in empty position\n      new_board[row][column] = 'yellow';\n\n      let next_move = minimizePlay(\n        new_board,\n        depth - 1,\n        gameScore,\n        alpha,\n        beta\n      ); // Recursive calling\n\n      // Evaluate new move\n      if (max[0] === null || next_move[1] > max[1]) {\n        max[0] = column;\n        max[1] = next_move[1];\n\n        alpha = next_move[1];\n      }\n      // @ts-ignore\n      if (alpha >= beta) return max;\n    }\n  }\n\n  return max;\n}\n\nexport function minimizePlay(\n  gameGrid: counter[][],\n  depth: number,\n  gameScore: number,\n  alpha?: number,\n  beta?: number\n): [null | number, number] {\n  let gameColumns = 7;\n  //  check current board score for cpu\n  const score = boardScore(gameGrid, gameScore);\n  // stop calculation if\n  // -we reached depth 0\n  //  gameScore is Infinity cpu wins\n  //  gameScore is -Infinity player wins\n  //  there is no more space\n  if (\n    depth === 0 ||\n    score === gameScore ||\n    score === -gameScore ||\n    boardIsFull(gameGrid)\n  )\n    return [null, score];\n  // current best Column, Score\n  let min: [null | number, number] = [null, Infinity];\n  //   For all possible moves\n  for (let column = 0; column < gameColumns; column++) {\n    // creating new board\n    let new_board = copyBoard(gameGrid);\n    // findig row to place counter\n    const row = findRowToLandCounter(new_board, column);\n    //  check if this place if empty\n    if (!new_board[row][column]) {\n      new_board[row][column] = 'red';\n\n      let next_move = maximizePlay(\n        new_board,\n        depth - 1,\n        gameScore,\n        alpha,\n        beta\n      );\n      // Evaluate new move\n      if (min[0] == null || next_move[1] < min[1]) {\n        min[0] = column;\n        min[1] = next_move[1];\n\n        beta = next_move[1];\n      }\n      // @ts-ignore\n      if (alpha >= beta) return min;\n    }\n  }\n\n  return min;\n}\n","import { expose } from 'comlink';\nimport { maximizePlay } from './aiMove';\n\nconst worker = {\n  maximizePlay,\n};\n\nexport type AiMoveWorker = typeof worker;\n\nexpose(worker);\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","push","value","err","TypeError","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","_construct","Parent","args","Class","a","apply","instance","Function","arguments","iter","proxyMarker","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","MessageChannel","port1","port2","expose","deserialize","port","start","createProxy","target","Error","isError","message","stack","serialized","assign","ep","self","addEventListener","callback","ev","data","returnValue","path","id","type","argumentList","map","fromWireValue","parent","reduce","prop","rawValue","proxy","transfer","undefined","Promise","resolve","catch","then","toWireValue","wireValue","transferables","postMessage","removeEventListener","closeEndPoint","endpoint","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","get","_target","requestResponseMessage","r","set","_thisArg","rawArgumentList","last","processArguments","processed","v","concat","transferCache","WeakMap","transfers","allowArrayLike","it","F","s","f","normalCompletion","didErr","step","_e2","handler","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","copyBoard","gameGrid","row","boardIsFull","scorePosition","column","deltaY","deltaX","gameScore","playerPoints","CPUPoints","boardScore","verticalPoints","horizontalPoints","diagonalPoints1","diagonalPoints2","gameRows","score","gameColumns","findRowToLandCounter","grid","maximizePlay","depth","alpha","beta","max","Infinity","new_board","next_move","minimizePlay","min"],"sourceRoot":""}